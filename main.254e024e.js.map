{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.254e024e.js","sourceRoot":"../src","sourcesContent":["class TodoEntry {\n    text: string;\n    completed: boolean;\n\n    constructor(text: string, completed: boolean) {\n        this.text = text;\n        this.completed = completed;\n    }\n}\n\n//\n// Predefined state\n//\nconst initialState = {\n    todos: [\n        new TodoEntry('Hi', true), \n        new TodoEntry('Hello there', false), \n        new TodoEntry('Hi there!', true)\n    ],\n    filter: 'all'\n};\n\n//\n// Class containing state\n//\nclass State {\n\n    _todos: Array<TodoEntry>;\n    _filter: String;\n\n    constructor(initialTodos: TodoEntry[], initialFilter: string) {\n        this._todos = initialTodos;\n        this._filter = initialFilter;\n    }\n\n    addTodo(todo: TodoEntry) {\n        return this._todos.push(todo);\n    }\n\n    setFilter(filter: string) {\n        this._filter = filter;\n    }\n\n    get todos(): TodoEntry[] {\n        return this._todos.filter((todo) => {\n            if (this._filter === 'all') {\n                return true;\n            } else if (this._filter === 'completed') {\n                return todo.completed === true;\n            } else if (this._filter === 'active') {\n                return todo.completed === false;\n            }\n        });\n    }\n\n    set todos(todos: TodoEntry[]) {\n        this._todos = todos;\n    }\n\n    removeTodoByText(text: string) {\n        this._todos = this._todos.filter(todo => {\n            return todo.text.trim() !== text.trim();\n        })\n    }\n}\n\nconst stateC = new State(initialState.todos, initialState.filter);\n\nfunction createHtmlWithCreateElement(todos: TodoEntry[], targetEl: Element) {\n    targetEl.innerHTML = ''\n\n    for (const todo of todos) {\n        // druhy zpusob\n        // zde musi byt let, proroze i++ meni tu promenou\n        //for (let i = 0; i < todos.length; i++) {\n        //const todo = todos[i];\n\n        // Prepare elements\n        const inputEl = document.createElement('input');\n        inputEl.classList.add('toggle');\n        inputEl.type = 'checkbox';\n        inputEl.checked = todo.completed;\n\n        const labelEl = document.createElement('label');\n        labelEl.innerHTML = todo.text;\n\n        const buttonEl = document.createElement('button');\n        buttonEl.classList.add('destroy');\n\n        // Append these elements to the todo wrapper element\n        const todoEl = document.createElement('li');\n        todoEl.appendChild(inputEl);\n        todoEl.appendChild(labelEl);\n        todoEl.appendChild(buttonEl);\n\n        // Append todo to the page\n        targetEl.appendChild(todoEl);\n    }\n\n    destroyButtonListeners()\n}\n\nfunction createHtmlWithStrings(todos: TodoEntry[], targetEl: Element) {\n    targetEl.innerHTML = '';\n\n    const todosHtmlArray = todos.map(function (todo) {\n        const html = `\n                <li> \n                    <input class=\"toggle\" type=\"checkbox\" ${todo.completed ? 'checked' : ''} >\n                    <label> ${todo.text} </label>\n                    <button class=\"destroy\"></button>\n                </li>\n                `;\n        return html;\n    })\n\n    const todosHtml = todosHtmlArray.join('');\n    targetEl.innerHTML = todosHtml;\n    destroyButtonListeners();\n}\n\n//\n// Append todos html into the page\n//\nconst todoListEl: HTMLInputElement = document.querySelector('.todo-list')!\ncreateHtmlWithCreateElement(stateC.todos, todoListEl);\n//createHtmlWithStrings(state.todos, todoListEl);\n\n//\n// Handle main input\n//\n// two options:\n// const inputEl: HTMLInputElement = document.querySelector('.new-todo');\n// const inputEl = document.querySelector('.new-todo') as HTMLInputElement;\nconst inputEl: HTMLInputElement = document.querySelector('.new-todo')!;\n\ninputEl.addEventListener('keyup', (event) => {\n    if (event.key !== \"Enter\") {\n        return;\n    }\n\n    // Update app state\n    const newTodo = {\n        text: inputEl.value,\n        completed: false\n    };\n    stateC.addTodo(newTodo);\n\n    // Update html\n    inputEl.value = '';\n    createHtmlWithCreateElement(stateC.todos, todoListEl);\n})\n\nclass FilterEntry {\n    name: string;\n    filterEl: HTMLInputElement;\n\n    constructor(name: string, filterEl: Element) {\n        this.name = name;\n        this.filterEl = filterEl as HTMLInputElement;\n    }\n}\n\n//\n// Handle filters\n//\nconst filters: { [key: string]: HTMLInputElement; } = {\n    'all': document.querySelector('#filter-all') as HTMLInputElement,\n    'active': document.querySelector('#filter-active') as HTMLInputElement,\n    'completed': document.querySelector('#filter-completed') as HTMLInputElement\n};\n\n// Tady muze byt const, protoze to filterName pokuzde deklarujeme nove, neprepisujeme\n// object desctructering\n//   (misto itrovani pres 'filter of Object.entries(filters)' a pak volani filterEl=filter[1])\nfor (const [filterName, filterEl] of Object.entries(filters)) {\n\n    // zde staci jen volat zavorkami, bez parametru\n    filterEl.addEventListener('click', () => {\n        filtersClick(filterName);\n    });\n}\n\nfunction filtersClick(newFilterType: string) {\n    // Remove 'selected' class on all filter buttons\n    // At the beggining the 'selected' one is 'filter-all' by default\n    for (const filterEl of Object.values(filters)) {\n        //console.log(filterEl.classList)\n        filterEl.classList.remove('selected');\n    }\n\n    // Add 'selected' class to clicked filter button\n    filters[newFilterType].classList.add('selected');\n\n    // Update state\n    stateC.setFilter(newFilterType);\n\n    // Render todos view\n    createHtmlWithCreateElement(stateC.todos, todoListEl);\n}\n\n// Remove todo button\nfunction destroyButtonListeners() {\n    for (const liEl of todoListEl.children) {\n        //console.log(liEl);\n        const destroyEl: Element = liEl.querySelector('button[class=destroy]')!\n        //console.log(destroyEl)\n        const label: HTMLLabelElement = liEl.querySelector('label')!;\n        const todoText = label.textContent!.trim()\n        //console.log(todoText)\n        destroyEl.addEventListener('click', () => {\n            console.log('Destroy todo: ' + todoText);\n            stateC.removeTodoByText(todoText);\n            createHtmlWithCreateElement(stateC.todos, todoListEl);\n        })\n    }\n}\n\n\n// Clear completed button\nconst clearCompletedEl = document.querySelector('button[class=clear-completed]')!;\nclearCompletedEl.addEventListener('click', () => {\n    stateC.todos = stateC.todos.filter(todo => {\n        return (todo.completed === true);\n    })\n    // Render todos view\n    createHtmlWithCreateElement(stateC.todos, todoListEl);\n})\n\n"]}